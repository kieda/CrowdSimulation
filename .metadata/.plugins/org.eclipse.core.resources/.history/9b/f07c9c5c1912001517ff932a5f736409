
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package edu.cmu.cs464.p3.modulelang;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ComplexSymbolFactory;
import edu.cmu.cs464.p3.modulelang.ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\005\005\000\002\005\003\000\002\003\003" +
    "\000\002\003\007\000\002\003\006\000\002\003\005\000" +
    "\002\006\004\000\002\006\003\000\002\004\005\000\002" +
    "\004\003\000\002\004\005\000\002\007\004\000\002\007" +
    "\005\000\002\010\004\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\006\007\006\012\010\001\002\000\004\012" +
    "\010\001\002\000\004\002\035\001\002\000\006\005\026" +
    "\012\025\001\002\000\004\002\uffff\001\002\000\014\002" +
    "\ufffd\005\ufffd\006\ufffd\010\022\012\ufffd\001\002\000\012" +
    "\002\ufffc\005\ufffc\006\012\012\ufffc\001\002\000\006\004" +
    "\013\012\010\001\002\000\006\005\017\012\010\001\002" +
    "\000\010\002\ufff9\005\ufff9\012\ufff9\001\002\000\006\005" +
    "\ufff7\012\010\001\002\000\004\005\020\001\002\000\010" +
    "\002\ufffa\005\ufffa\012\ufffa\001\002\000\010\002\ufffb\005" +
    "\ufffb\012\ufffb\001\002\000\004\005\ufff8\001\002\000\004" +
    "\012\010\001\002\000\012\002\ufffe\005\ufffe\006\ufffe\012" +
    "\ufffe\001\002\000\004\005\034\001\002\000\010\005\ufff5" +
    "\010\031\012\ufff5\001\002\000\004\012\ufff3\001\002\000" +
    "\006\005\ufff0\012\025\001\002\000\004\005\ufff1\001\002" +
    "\000\006\011\032\012\025\001\002\000\006\005\ufff6\012" +
    "\ufff6\001\002\000\006\005\ufff4\012\ufff4\001\002\000\004" +
    "\012\ufff2\001\002\000\004\002\000\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\012\002\004\003\006\005\010\007\003\001" +
    "\001\000\006\003\035\005\010\001\001\000\002\001\001" +
    "\000\006\004\026\010\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\013\005\010" +
    "\001\001\000\010\003\014\005\010\006\015\001\001\000" +
    "\002\001\001\000\010\003\014\005\010\006\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\026\010\027\001\001\000\002\001\001\000\004" +
    "\004\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors;


  Lexer lexer;
 
  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }

  private ParsedModule module(List<String> baseClass, List<ParsedModule> children){
    return new ParsedModule(new JavaRef(baseClass), children);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= imports module 
            {
              Program RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<ModuleImport> il = (LinkedList<ModuleImport>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParsedModule m = (ParsedModule)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(il, m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= module 
            {
              Program RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParsedModule m = (ParsedModule)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(new LinkedList<>(), m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // javaRef ::= IDENT DOT javaRef 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int jrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> jr = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 jr.addFirst(i); RESULT = jr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("javaRef",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // javaRef ::= IDENT 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        LinkedList<String> ll = new LinkedList<>(); 
        ll.add(i);
        RESULT = ll;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("javaRef",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // module ::= javaRef 
            {
              ParsedModule RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> j = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = module(j, new LinkedList<>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // module ::= javaRef COLON HAS moduleList END 
            {
              ParsedModule RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<String> j = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<ParsedModule> l = (LinkedList<ParsedModule>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = module(j, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // module ::= javaRef COLON HAS END 
            {
              ParsedModule RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<String> j = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = module(j, new LinkedList<>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // module ::= javaRef COLON module 
            {
              ParsedModule RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<String> j = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParsedModule m = (ParsedModule)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        LinkedList<ParsedModule> l = new LinkedList<>(); 
        l.addFirst(m);
        RESULT = module(j, l); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // moduleList ::= module moduleList 
            {
              LinkedList<ParsedModule> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParsedModule m = (ParsedModule)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ParsedModule> ml = (LinkedList<ParsedModule>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ml.addFirst(m); RESULT = ml; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("moduleList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // moduleList ::= module 
            {
              LinkedList<ParsedModule> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParsedModule m = (ParsedModule)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<ParsedModule> l = new LinkedList<>(); l.add(m); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("moduleList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // moduleImport ::= IDENT DOT STAR 
            {
              LinkedList<ImportToken> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
        LinkedList<ImportToken> ll = new LinkedList<>();
        
        ll.addFirst(ImportToken.ident(id)ident(i));
        ll.addFirst(ImportToken.star());
        RESULT = ll;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("moduleImport",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // moduleImport ::= IDENT 
            {
              LinkedList<ImportToken> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        LinkedList<ImportToken> ll = new LinkedList<>();
        ll.add(ImportToken.ident(i));
        RESULT = ll;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("moduleImport",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // moduleImport ::= IDENT DOT moduleImport 
            {
              LinkedList<ImportToken> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int impleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int impright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ImportToken> imp = (LinkedList<ImportToken>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        imp.addFirst(ImportToken.ident(i));
        RESULT = imp;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("moduleImport",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // imports ::= IMPORT END 
            {
              LinkedList<ModuleImport> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // imports ::= IMPORT importList END 
            {
              LinkedList<ModuleImport> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<ModuleImport> il = (LinkedList<ModuleImport>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = il; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imports",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // importList ::= moduleImport importList 
            {
              LinkedList<ModuleImport> RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<ImportToken> j = (LinkedList<ImportToken>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int jrlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jrlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ModuleImport> jrl = (LinkedList<ModuleImport>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 jrl.addFirst(new ModuleImport(j)); RESULT = jrl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("importList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // importList ::= moduleImport 
            {
              LinkedList<ModuleImport> RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ImportToken> j = (LinkedList<ImportToken>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<ModuleImport> l = new LinkedList<>(); l.add(new ModuleImport(j)); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("importList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
